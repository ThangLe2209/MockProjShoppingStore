// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShoppingStore.API.DbContexts;

#nullable disable

namespace ShoppingStore.API.Migrations.ShoppingStoreMigrations
{
    [DbContext(typeof(ShoppingStoreContext))]
    [Migration("20240829045732_InitialShoppingStorePostgreSql")]
    partial class InitialShoppingStorePostgreSql
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShoppingStore.Model.BrandModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9051a770-0c97-401f-a7c6-0310c689f4c2"),
                            Description = "Apple is large brand in the world",
                            Name = "Apple",
                            Slug = "apple",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("dd7a3fb2-8b2c-4f1d-a013-a922b3418997"),
                            Description = "Samsung is large brand in the world",
                            Name = "Samsung",
                            Slug = "samsung",
                            Status = 1
                        });
                });

            modelBuilder.Entity("ShoppingStore.Model.CategoryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c614d84d-b9ee-44ec-9004-273d29bf9217"),
                            Description = "Macbook is large Product in the world",
                            Name = "Macbook",
                            Slug = "macbook",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("4b94e412-6c11-44ab-855c-2409f9d3f8de"),
                            Description = "Pc is large Product in the world",
                            Name = "Pc",
                            Slug = "pc",
                            Status = 1
                        });
                });

            modelBuilder.Entity("ShoppingStore.Model.OrderDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ShoppingStore.Model.OrderModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ShoppingStore.Model.ProductModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8527cc44-fee5-40c4-b20a-c8c5dab253ff"),
                            BrandId = new Guid("9051a770-0c97-401f-a7c6-0310c689f4c2"),
                            CategoryId = new Guid("c614d84d-b9ee-44ec-9004-273d29bf9217"),
                            Description = "Macbook is the Best",
                            Image = "1.jpg",
                            Name = "Macbook",
                            Price = 1233m,
                            Slug = "macbook"
                        },
                        new
                        {
                            Id = new Guid("a2848bab-cb60-497d-9040-5e302ff26c46"),
                            BrandId = new Guid("dd7a3fb2-8b2c-4f1d-a013-a922b3418997"),
                            CategoryId = new Guid("4b94e412-6c11-44ab-855c-2409f9d3f8de"),
                            Description = "Pc is the Best",
                            Image = "1.jpg",
                            Name = "Pc",
                            Price = 1233m,
                            Slug = "pc"
                        });
                });

            modelBuilder.Entity("ShoppingStore.Model.RatingModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<string>("Star")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("ShoppingStore.Model.OrderDetails", b =>
                {
                    b.HasOne("ShoppingStore.Model.ProductModel", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShoppingStore.Model.ProductModel", b =>
                {
                    b.HasOne("ShoppingStore.Model.BrandModel", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ShoppingStore.Model.CategoryModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShoppingStore.Model.RatingModel", b =>
                {
                    b.HasOne("ShoppingStore.Model.ProductModel", "Product")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShoppingStore.Model.ProductModel", b =>
                {
                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
