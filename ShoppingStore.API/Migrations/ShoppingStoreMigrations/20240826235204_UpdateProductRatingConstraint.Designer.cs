// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoppingStore.API.DbContexts;

#nullable disable

namespace ShoppingStore.API.Migrations.ShoppingStoreMigrations
{
    [DbContext(typeof(ShoppingStoreContext))]
    [Migration("20240826235204_UpdateProductRatingConstraint")]
    partial class UpdateProductRatingConstraint
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("ShoppingStore.Model.BrandModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a4e82a3-c89a-4b46-a4d6-27d6cf3f7c71"),
                            Description = "Apple is large brand in the world",
                            Name = "Apple",
                            Slug = "apple",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("e04c01ba-a089-4b9b-908a-9e14c850d88c"),
                            Description = "Samsung is large brand in the world",
                            Name = "Samsung",
                            Slug = "samsung",
                            Status = 1
                        });
                });

            modelBuilder.Entity("ShoppingStore.Model.CategoryModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Slug")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7da31de5-0799-4016-9d74-68544779af47"),
                            Description = "Macbook is large Product in the world",
                            Name = "Macbook",
                            Slug = "macbook",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("f96b0cdd-a262-4242-8d78-a69f984ae1a4"),
                            Description = "Pc is large Product in the world",
                            Name = "Pc",
                            Slug = "pc",
                            Status = 1
                        });
                });

            modelBuilder.Entity("ShoppingStore.Model.OrderDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("ShoppingStore.Model.OrderModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ShoppingStore.Model.ProductModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("Slug")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7d15e3d1-20d4-4c10-9167-f47d73677ea2"),
                            BrandId = new Guid("9a4e82a3-c89a-4b46-a4d6-27d6cf3f7c71"),
                            CategoryId = new Guid("7da31de5-0799-4016-9d74-68544779af47"),
                            Description = "Macbook is the Best",
                            Image = "1.jpg",
                            Name = "Macbook",
                            Price = 1233m,
                            Slug = "macbook"
                        },
                        new
                        {
                            Id = new Guid("d49b18e7-63a3-4694-a360-c66cc79a08fd"),
                            BrandId = new Guid("e04c01ba-a089-4b9b-908a-9e14c850d88c"),
                            CategoryId = new Guid("f96b0cdd-a262-4242-8d78-a69f984ae1a4"),
                            Description = "Pc is the Best",
                            Image = "1.jpg",
                            Name = "Pc",
                            Price = 1233m,
                            Slug = "pc"
                        });
                });

            modelBuilder.Entity("ShoppingStore.Model.RatingModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Star")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("ShoppingStore.Model.OrderDetails", b =>
                {
                    b.HasOne("ShoppingStore.Model.ProductModel", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShoppingStore.Model.ProductModel", b =>
                {
                    b.HasOne("ShoppingStore.Model.BrandModel", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingStore.Model.CategoryModel", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("ShoppingStore.Model.RatingModel", b =>
                {
                    b.HasOne("ShoppingStore.Model.ProductModel", "Product")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShoppingStore.Model.ProductModel", b =>
                {
                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
